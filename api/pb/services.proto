syntax = "proto3";

package user;

option go_package = "github.com/JMURv/unona/services/api/pb/services";
import "google/protobuf/timestamp.proto";

message Empty {}

service Broadcast {
  rpc CreateStream(Connect) returns (stream Notification);
}

message Connect {
  string user_uuid = 1;
  bool active = 2;
}

service Emails {
  rpc SendVerificationUserEmail (VerifyUserRequest) returns (Empty);
  rpc SendLoginEmailMessage (SendLoginEmailMessageRequest) returns (Empty);
  rpc SendActivateEmailCode (SendActivateEmailCodeRequest) returns (Empty);
  rpc SendForgotPasswordEmail (SendForgotPasswordEmailRequest) returns (Empty);
}

message SendForgotPasswordEmailRequest {
  string user_uuid = 1;
  string email = 2;
}

message SendLoginEmailMessageRequest {
  string captcha = 1;
  string email = 2;
  string password = 3;
}

message SendActivateEmailCodeRequest {
  string captcha = 1;
  string email = 2;
  string key = 3;
}

message VerifyUserRequest {
  string user_uuid = 1;
  bytes photo = 2;
}
// TODO: сделать сервис аутентификации
service Auth {
  rpc Login (Empty) returns (Empty);
  rpc Logout (LogoutRequest) returns (Empty);

  rpc CheckLoginCode (CheckLoginCodeRequest) returns (Empty);
  rpc CheckActivationCode (CheckActivationCodeRequest) returns (Empty);

  rpc TokenObtainPair (Empty) returns (Empty);
  rpc TokenRefresh (Empty) returns (Empty);
  rpc TokenVerify (Empty) returns (Empty);
  rpc DeleteAllTokens (Empty) returns (Empty);
}

message LogoutRequest {
  string refresh_token = 1;
}

message CheckLoginCodeRequest {
  string email = 1;
  string code = 2;
}

message CheckActivationCodeRequest {
  string code = 1;
  string key = 2;
}

service Notifications {
  rpc ListUserNotifications(ByUserUUIDRequest) returns (ListNotificationResponse);
  rpc ReadNotification(ReadNotificationRequest) returns (Empty);
  rpc DeleteNotification(DeleteNotificationRequest) returns (Empty);
  rpc DeleteAllNotifications(ByUserUUIDRequest) returns (Empty);
}

message ReadNotificationRequest {
  string user_uuid = 1;
}

message Notification {
  uint64 id = 1;
  string type = 2;
  string user_uuid = 3;
  string receiver_uuid = 4;
  string message = 5;
  uint64 created_at = 6;
}

message ByUserUUIDRequest {
  string user_uuid = 1;
}

message ListNotificationResponse {
  repeated Notification notifications = 1;
}

message DeleteNotificationRequest {
  uint64 id = 1;
}